import com.android.build.gradle.api.AndroidBasePlugin
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'com.android.application' version "8.2.0"
    id 'com.android.library' version "8.2.0" apply false
    id 'com.android.test' version '8.2.0' apply false
    id 'androidx.baselineprofile' version '1.2.2'
    id 'org.jetbrains.kotlin.android' version "1.9.21"
    id 'org.jetbrains.kotlin.plugin.parcelize' version "1.9.21"
    id 'org.jetbrains.kotlin.plugin.serialization' version "1.9.21"
    id "com.google.devtools.ksp" version "1.9.21-1.0.15"
    id 'com.google.protobuf' version "0.9.4"
    id 'app.cash.licensee' version "1.8.0"
    id 'dev.rikka.tools.refine' version "4.4.0"
    id 'org.gradle.android.cache-fix' version '3.0'
    id 'com.diffplug.spotless' version '6.23.3'
}

allprojects {
    plugins.withType(AndroidBasePlugin).configureEach {
        apply plugin: 'org.gradle.android.cache-fix'

        android {
            compileSdk 34
            defaultConfig {
                minSdk 26
                targetSdk 34
                vectorDrawables.useSupportLibrary = true
            }
            lint {
                abortOnError true
                checkReleaseBuilds false
            }
        }
        dependencies {
            implementation 'androidx.core:core-ktx:1.12.0'
            implementation 'androidx.appcompat:appcompat:1.6.1'
        }
    }

    plugins.withId('com.google.protobuf') {
        def protocVersion = '3.25.1'
        protobuf {
            // Configure the protoc executable
            protoc {
                artifact = "com.google.protobuf:protoc:${protocVersion}"
            }
            generateProtoTasks {
                all().configureEach { task ->
                    task.builtins {
                        remove java
                        java {
                            option "lite"
                        }
                    }
                }
            }
        }
        dependencies {
            implementation "com.google.protobuf:protobuf-javalite:$protocVersion"
        }
    }

    plugins.withType(JavaBasePlugin).configureEach {
        java {
            toolchain.languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(KotlinCompile).configureEach {
        compilerOptions.freeCompilerArgs.add(
            "-Xjvm-default=all",
        )
    }

    ext {
        FRAMEWORK_PREBUILTS_DIR = "$rootDir/prebuilts/libs"
        daggerVersion = '2.49'

        addFrameworkJar = { String name ->
            def frameworkJar = new File(FRAMEWORK_PREBUILTS_DIR, name)
            if (!frameworkJar.exists()) {
                throw new IllegalArgumentException("Framework jar path ${frameworkJar.path} doesn't exist")
            }
            gradle.projectsEvaluated {
                tasks.withType(JavaCompile).configureEach {
                    classpath = files(frameworkJar, classpath)
                }
                tasks.withType(KotlinCompile).configureEach {
                    libraries.from(files(frameworkJar))
                }
            }
        }

        compileOnlyCommonJars = {
            dependencies {
                compileOnly fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'SystemUI-core.jar')
                compileOnly fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'SystemUI-statsd.jar')
                compileOnly fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'WindowManager-Shell-14.jar')
                compileOnly fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'framework-14.jar')
            }
        }
    }
}

final def buildCommit = providers.exec {
    commandLine('git', 'rev-parse', '--short=7', 'HEAD')
}.standardOutput.asText.get().trim()

final def ciBuild = System.getenv("CI") == "true"
final def ciRef = System.getenv("GITHUB_REF") ?: ""
final def ciRunNumber = System.getenv("GITHUB_RUN_NUMBER") ?: ""
final def isReleaseBuild = ciBuild && ciRef.contains("alpha")
final def devReleaseName = ciBuild ? "Dev (#${ciRunNumber})" : "Dev (${buildCommit})"
final def version = "14"
final def releaseName = "Beta 1"
final def versionDisplayName = "${version} ${isReleaseBuild ? releaseName : devReleaseName}"
final def majorVersion = versionDisplayName.split("\\.")[0]

final def quickstepMinSdk = "34"
final def quickstepMaxSdk = "34"

android {
    namespace "com.android.launcher3"
    defaultConfig {
        versionCode 13
        versionName "${versionDisplayName}"
        buildConfigField "String", "VERSION_DISPLAY_NAME", "\"${versionDisplayName}\""
        buildConfigField "String", "MAJOR_VERSION", "\"${majorVersion}\""
        buildConfigField "String", "COMMIT_HASH", "\"${buildCommit}\""
        buildConfigField "boolean", "ENABLE_AUTO_INSTALLS_LAYOUT", "false"

        manifestPlaceholders.quickstepMinSdk = quickstepMinSdk
        manifestPlaceholders.quickstepMaxSdk = quickstepMaxSdk
        buildConfigField "int", "QUICKSTEP_MIN_SDK", quickstepMinSdk
        buildConfigField "int", "QUICKSTEP_MAX_SDK", quickstepMaxSdk
    }

    applicationVariants.configureEach { variant ->
        def capitalizedName = variant.name.capitalize()
        def copyArtifactList = tasks.register("copy${capitalizedName}ArtifactList", Copy) {
            dependsOn tasks.named("licenseeAndroid${capitalizedName}")
            from reporting.file("licensee/android${capitalizedName}/artifacts.json")
            into layout.buildDirectory.dir("generated/dependencyAssets/")
        }
        tasks.named("merge${variant.name.capitalize()}Assets").configure {
            dependsOn copyArtifactList
        }

        variant.outputs.configureEach {
            outputFileName = "Lawnchair ${variant.versionName}.apk"
        }
    }

    buildFeatures {
        aidl true
        buildConfig true
        compose true
        resValues true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.6"
    }

    final def keystorePropertiesFile = rootProject.file("keystore.properties")
    def releaseSigning = signingConfigs.debug
    if (keystorePropertiesFile.exists()) {
        final def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        releaseSigning = signingConfigs.create("release") {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    packagingOptions.resources.excludes += [
        "**/*.proto",
        "**/*.bin",
        "**/*.java",
        "**/*.properties",
        "**/*.version",
        "**/*.*_module",
        "com/**",
        "google/**",
        "kotlin/**",
        "kotlinx/**",
        "okhttp3/**",
        "META-INF/services/**",
        "META-INF/com/**",
        "META-INF/licenses/**",
        "META-INF/AL2.0",
        "META-INF/LGPL2.1",
    ]

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            resValue("string", "derived_app_name", "Lawnchair (Debug)")
            signingConfig releaseSigning
        }

        release {
            resValue("string", "derived_app_name", "Lawnchair")
            signingConfig releaseSigning
            minifyEnabled true
            shrinkResources true
            proguardFiles "proguard.flags", "proguard.pro"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
    }

    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }

    // The flavor dimensions for build variants (e.g. aospWithQuickstep, aospWithoutQuickstep)
    // See: https://developer.android.com/studio/build/build-variants#flavor-dimensions
    flavorDimensions += ["app", "recents"]

    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

        l3go {
            dimension "app"
            applicationId 'com.android.launcher3'
            testApplicationId 'com.android.launcher3.tests'
        }

        lawn {
            dimension "app"
            applicationId 'app.lawnchair'
            testApplicationId 'com.android.launcher3.tests'
            isDefault true
        }

        withQuickstep {
            dimension "recents"
            minSdk 26
            isDefault true
        }

        withoutQuickstep {
            dimension "recents"
        }

        configureEach {
            resValue("string", "launcher_component", "${applicationId}/app.lawnchair.LawnchairLauncher")
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src', 'src_plugins']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDirs = ['protos/', 'quickstep/protos_overrides/']
            }
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src', 'tests/tapl']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
        }

        aospWithoutQuickstep {
            manifest.srcFile "AndroidManifest.xml"
        }

        aospWithQuickstep {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src']
            manifest.srcFile "go/AndroidManifest.xml"
        }

        l3goWithoutQuickstepDebug {
            manifest.srcFile "AndroidManifest.xml"
        }

        l3goWithQuickstepDebug {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        lawn {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides', 'lawnchair/src', 'tests/shared']
            aidl.srcDirs = ['lawnchair/aidl']
            res.srcDirs = ['lawnchair/res', 'platform_frameworks_libs_systemui/animationlib/res']
            manifest.srcFile "lawnchair/AndroidManifest.xml"
            assets {
                srcDirs 'lawnchair/assets'
            }
            proto {
                srcDirs = ['lawnchair/protos/']
            }
        }

        lawnWithoutQuickstep {
            manifest.srcFile "AndroidManifest.xml"
        }

        lawnWithQuickstep {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
            assets.srcDir layout.buildDirectory.dir("generated/dependencyAssets/")
        }

        withoutQuickstep {
            java.srcDirs = ['src_ui_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }
    }
}

addFrameworkJar('framework-14.jar')

dependencies {
    implementation projects.iconloaderlib
    implementation projects.searchuilib
    implementation projects.animationlib

    // Recents lib dependency
    withQuickstepCompileOnly projects.hiddenApi
    withQuickstepImplementation projects.systemUIShared
    withQuickstepImplementation projects.systemUIAnim
    withQuickstepImplementation projects.systemUnFold
    withQuickstepImplementation projects.systemUIViewCapture
    withQuickstepImplementation projects.systemUILog
    withQuickstepImplementation projects.systemUIPlugin
    withQuickstepImplementation projects.systemUIPluginCore
    withQuickstepImplementation projects.systemUICommon

    implementation fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'SystemUI-statsd-14.jar')

    implementation fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'WindowManager-Shell-14.jar')
    withQuickstepCompileOnly fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'framework-14.jar')

    // Required for AOSP to compile. This is already included in the sysui_shared.jar
    withoutQuickstepImplementation fileTree(dir: FRAMEWORK_PREBUILTS_DIR, include: 'plugin_core.jar')

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation 'androidx.profileinstaller:profileinstaller:1.3.1'
    baselineProfile projects.baselineProfile

    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    implementation "androidx.preference:preference-ktx:1.2.1"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2'
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.6"
    implementation 'com.github.ChickenHook:RestrictionBypass:2.2'
    implementation 'dev.rikka.tools.refine:runtime:4.4.0'

    implementation platform("androidx.compose:compose-bom:2023.10.01")
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-util"
    debugImplementation "androidx.compose.ui:ui-tooling"
    implementation "androidx.compose.ui:ui-text-google-fonts"
    implementation "androidx.compose.foundation:foundation"
    implementation "androidx.compose.material:material-icons-extended"
    implementation "androidx.compose.material:material"
    implementation "androidx.compose.runtime:runtime-livedata"
    implementation 'androidx.compose.material3:material3'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.activity:activity-compose:1.8.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2"
    implementation "androidx.navigation:navigation-compose:2.7.5"
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.slice:slice-core:1.1.0-alpha02"
    def accompanistVersion = '0.32.0'
    implementation "com.google.accompanist:accompanist-drawablepainter:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-insets-ui:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-permissions:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanistVersion"
    implementation "com.google.android.material:material:1.11.0"
    implementation "io.github.fornewid:material-motion-compose-core:1.0.7"
    implementation 'dev.kdrag0n:colorkt:1.0.5'
    implementation 'io.coil-kt:coil-compose:2.5.0'
    implementation 'me.xdrop:fuzzywuzzy:1.4.0'
    def optoVersion = "1.0.18"
    implementation "com.patrykmichalik.opto:domain:$optoVersion"
    implementation "com.patrykmichalik.opto:core:$optoVersion"
    implementation "com.patrykmichalik.opto:compose:$optoVersion"
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:1.0.0"

    def roomVersion = '2.6.1'
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    ksp "androidx.room:room-compiler:$roomVersion"

    implementation "com.github.topjohnwu.libsu:service:5.2.2"

    // Persian Date
    implementation 'com.github.samanzamani:PersianDate:1.7.1'

    implementation 'com.airbnb.android:lottie:6.2.0'

    // Smartspacer
    implementation('com.kieronquinn.smartspacer:sdk-client:1.0.6') {
        exclude group: "com.github.skydoves", module: "balloon"
    }
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas")
    arg("room.generateKotlin", "true")
    arg("room.incremental", "true")
}

spotless {
    kotlin {
        target("lawnchair/src/**/*.kt")
        ktlint().customRuleSets([
            "io.nlopez.compose.rules:ktlint:0.3.5",
        ]).editorConfigOverride([
            "ktlint_compose_modifier-missing-check": "disabled",
            "ktlint_compose_compositionlocal-allowlist": "disabled",
        ])
    }
}

licensee {
    allow("Apache-2.0")
    allow("BSD-3-Clause")
    allow("GPL-2.0-or-later")
    allowDependency("com.github.topjohnwu.libsu", "core", "5.2.2")
    allowDependency("com.github.topjohnwu.libsu", "service", "5.2.2")
    allowUrl("https://github.com/patrykmichalik/opto/blob/master/LICENSE")
    allowUrl("https://github.com/RikkaApps/HiddenApiRefinePlugin/blob/main/LICENSE")
    allowUrl("https://opensource.org/licenses/mit-license.php")
}
